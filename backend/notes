========================
ðŸ“Œ CORE BACKEND TOOLS
========================
express â†’ Framework for building server-side applications and handling API routes efficiently.
mongoose â†’ Object Data Modeling (ODM) library for MongoDB to manage database schemas and queries.
jsonwebtoken (JWT) â†’ Used for creating and verifying authentication tokens for secure user sessions.
bcrypt â†’ Hashes and verifies passwords to ensure secure authentication.
multer â†’ Middleware for handling file uploads, such as product images.
cloudinary â†’ Cloud-based service for storing, optimizing, and delivering images.
stripe & razorpay â†’ Payment gateway integrations to process online transactions.
validator â†’ Provides built-in functions to validate inputs like email formats, URLs, etc.
cors â†’ Enables the backend API to be accessed from different domains (cross-origin requests).
dotenv â†’ Loads sensitive environment variables from a .env file into the application.
nodemon â†’ Automatically restarts the server during development when file changes are detected.

========================
ðŸ“Œ EXPRESS MIDDLEWARES
========================
express.json() â†’ Parses incoming JSON requests.
cors() â†’ Enables CORS.

========================
ðŸ“Œ MVC STRUCTURE
========================
Models â€“ Represent the structure and rules of your database collections/tables. 
    Example: A User model might define name, email, and password fields with validations.

Middlewares â€“ Special functions that run between the request and the response.
    Use cases: authentication checks, logging, file uploads, or modifying request/response objects.

Controllers â€“ Contain the core logic for handling requests.
    They receive input from routes, interact with models, process data, and send the response.

Config â€“ Central place for application setup.
    Example: database connection, API keys, and service configurations.

Routes â€“ Define the applicationâ€™s endpoints (URLs) and map them to specific controller functions.

========================
ðŸ“Œ DEVELOPMENT
========================
Hot reload â†’ Your application automatically updates when you change the code.
    Frontend: refreshes only changed components while keeping app state.
    Backend: with nodemon, restarts server when a file changes.

========================
ðŸ“Œ COMMON FUNCTIONS
========================
userModel.findOne â†’ Searches the database for a single user matching the condition.
return res.json(...) â†’ Sends a JSON response back to the client and stops function execution.

========================
ðŸ“Œ PASSWORD SECURITY
========================
bcrypt.genSalt(rounds) â†’ Creates a random "salt" for password hashing (more rounds = more secure but slower).
bcrypt.hash(password, salt) â†’ Combines the password and salt, then hashes it for secure storage.

========================
ðŸ“Œ PROMISES
========================
A Promise in JavaScript is an object representing the result of an async operation.
States:
    Pending â†’ operation in progress
    Fulfilled (Resolved) â†’ operation succeeded
    Rejected â†’ operation failed
Creation: new Promise((resolve, reject) => { ... })
Handling:
    .then() â†’ runs on success
    .catch() â†’ runs on error
    .finally() â†’ runs regardless of outcome
Static Methods:
    Promise.all() â†’ waits for all to succeed
    Promise.allSettled() â†’ waits for all to settle
    Promise.race() â†’ returns first settled promise
    Promise.any() â†’ returns first fulfilled promise

========================
ðŸ“Œ FILE STORAGE TYPES
========================
1. Disk Storage
    Files are saved directly to a folder (like uploads/).
    Used for keeping files for later use or serving via static routes/cloud upload.
2. Memory Storage
    Files kept in RAM as Buffer objects.
    Used for immediate processing (e.g., resize, scan, upload to cloud without saving).

========================
ðŸ“Œ TOKEN BASICS
========================
A token is simply a piece of data (often a string) that represents a user's identity and possibly their permissions.
Acts as a digital key for accessing protected resources without logging in again.
Generated by the server after authentication and sent to the client.
The client sends it on each request instead of username/password.

========================
ðŸ“Œ AUTHENTICATION vs AUTHORIZATION
========================
Term                Meaning                               Example
Authentication      Verifying who the user is             Logging in with username/password
Authorization       Checking what the user can do         Only admins can delete products

Authentication comes first â†’ Once we know who the user is, we check their permissions.

========================
ðŸ“Œ AUTHENTICATION TYPES
========================
Session-based Authentication:
    - Server stores session data in memory or DB.
    - Browser stores session ID in a cookie.
    - Example: Old PHP or Express-session apps.

Token-based Authentication (JWT is most popular):
    - Server issues a token after login.
    - Client stores token (localStorage or cookies).
    - Client sends token with every request (in headers).
    - Server verifies the token.

========================
ðŸ“Œ JWT (JSON Web Token)
========================
A compact and self-contained way to securely transmit info.
Structure: HEADER.PAYLOAD.SIGNATURE
Header (Base64):
    Tells algorithm & type.
Payload (Base64):
    Contains data (claims).
Signature:
    HMACSHA256(
      base64UrlEncode(header) + "." + base64UrlEncode(payload),
      secret
    )
    Ensures data hasnâ€™t been changed.

========================
ðŸ“Œ HASHING & SALTING
========================
Hashing:
    - One-way function (cannot reverse).
    - Used for storing passwords securely.
Salting:
    - Random string added before hashing.
    - bcrypt has built-in salting.
Why Salt + Hash?
    Without salt â†’ same password = same hash â†’ vulnerable.
    With salt â†’ same password = different hashes â†’ safer.

========================
ðŸ“Œ ACCESS TOKEN vs REFRESH TOKEN
========================
Access Token:
    - Short-lived token.
    - Used to access protected resources.
    - Example: "Valid for next 15 minutes."
Refresh Token:
    - Long-lived token.
    - Used to get new access token.
    - Stored securely, never sent in normal API requests.

========================
ðŸ“Œ SESSION vs COOKIE
========================
Aspect          Session                                 Cookie
Where stored    On the server (memory or DB)            On the client (browser)
What stored     User-specific data                      Small data/text
Security        More secure (data not exposed)          Less secure (client-side)
Size limit      No strict limit                         ~4 KB
Lifetime        Ends with browser close or timeout      Can expire at set date
Use case        Store logged-in user state              Store small info or session ID
